###############################################################################
#
# IAR ANSI C/C++ Compiler V8.40.2.214/W32 for ARM         24/Dec/2019  19:05:23
# Copyright 1999-2019 IAR Systems AB.
#
#    Cpu mode     =  
#    Endian       =  little
#    Source file  =
#        C:\Users\lsj\Desktop\2019
#        3-2\@@@@\@@@@@@\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\app.c
#    Command line =
#        -f C:\Users\lsj\AppData\Local\Temp\EW3AC.tmp
#        ("C:\Users\lsj\Desktop\2019
#        3-2\@@@@\@@@@@@\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\app.c"
#        -lCN "C:\Users\lsj\Desktop\2019
#        3-2\@@@@\@@@@@@\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List"
#        -o "C:\Users\lsj\Desktop\2019
#        3-2\@@@@\@@@@@@\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj"
#        --debug --endian=little --cpu=Cortex-M3 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        8.3\arm\inc\c\DLib_Config_Normal.h" -I "C:\Users\lsj\Desktop\2019
#        3-2\@@@@\@@@@@@\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\"
#        -I "C:\Users\lsj\Desktop\2019
#        3-2\@@@@\@@@@@@\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\ucos-ii\ports\arm-cortex-m3\generic\iar\"
#        -I "C:\Users\lsj\Desktop\2019
#        3-2\@@@@\@@@@@@\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\ucos-ii\source\"
#        -I "C:\Users\lsj\Desktop\2019
#        3-2\@@@@\@@@@@@\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-lib\"
#        -I "C:\Users\lsj\Desktop\2019
#        3-2\@@@@\@@@@@@\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-cpu\"
#        -I "C:\Users\lsj\Desktop\2019
#        3-2\@@@@\@@@@@@\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uc-cpu\ARM-Cortex-M3\IAR\"
#        -I "C:\Users\lsj\Desktop\2019
#        3-2\@@@@\@@@@@@\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\cpu\st\stm32\inc\"
#        -I "C:\Users\lsj\Desktop\2019
#        3-2\@@@@\@@@@@@\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\BSP\"
#        -I "C:\Users\lsj\Desktop\2019
#        3-2\@@@@\@@@@@@\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Source\"
#        -I "C:\Users\lsj\Desktop\2019
#        3-2\@@@@\@@@@@@\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\RS-232\Ports\ST\STM32\"
#        -I "C:\Users\lsj\Desktop\2019
#        3-2\@@@@\@@@@@@\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Communication\Generic\Source\"
#        -I "C:\Users\lsj\Desktop\2019
#        3-2\@@@@\@@@@@@\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\..\..\..\..\..\uC-Probe\Target\Plugins\uCOS-II\"
#        -Ohz --use_c++_inline -I "C:\Program Files (x86)\IAR Systems\Embedded
#        Workbench 8.3\arm\CMSIS\Core\Include\" -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 8.3\arm\CMSIS\DSP\Include\")
#    Locale       =  C
#    List file    =
#        C:\Users\lsj\Desktop\2019
#        3-2\@@@@\@@@@@@\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\List\app.lst
#    Object file  =
#        C:\Users\lsj\Desktop\2019
#        3-2\@@@@\@@@@@@\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\Flash\Obj\app.o
#
###############################################################################

C:\Users\lsj\Desktop\2019 3-2\@@@@\@@@@@@\Micrium\Software\EvalBoards\ST\STM3210B-EVAL\IAR\OS-Probe\app.c
      1          /*
      2           *********************************************************************************************************
      3           *                                              EXAMPLE CODE
      4           *
      5           *                          (c) Copyright 2003-2006; Micrium, Inc.; Weston, FL
      6           *
      7           *               All rights reserved.  Protected by international copyright laws.
      8           *               Knowledge of the source code may NOT be used to develop a similar product.
      9           *               Please help us continue to provide the Embedded community with the finest
     10           *               software available.  Your honesty is greatly appreciated.
     11           *********************************************************************************************************
     12           */
     13          
     14          /*
     15           *********************************************************************************************************
     16           *
     17           *                                            EXAMPLE CODE
     18           *
     19           *                                     ST Microelectronics STM32
     20           *                                              with the
     21           *                                   STM3210B-EVAL Evaluation Board
     22           *
     23           * Filename      : app.c
     24           * Version       : V1.10
     25           * Programmer(s) : BAN
     26           *********************************************************************************************************
     27           */
     28          
     29          
     30          /*
     31           *********************************************************************************************************
     32           *                                             INCLUDE FILES
     33           *********************************************************************************************************
     34           */
     35          
     36          #include <includes.h>
     37          #include  <stm32f10x_tim.h>
     38          #include  <stm32f10x_gpio.h>
     39          #include  <stm32f10x_rcc.h>
     40          #include  <stm32f10x_lib.h>
     41          #include  <stm32f10x_map.h>
     42          #include  <stm32f10x_dma.h>
     43          #include  <stm32f10x_usart.h>
     44          #include  <stm32f10x_adc.h>
     45          
     46          
     47          
     48          /*
     49           *********************************************************************************************************
     50           *                                            LOCAL DEFINES
     51           *********************************************************************************************************
     52           */
     53          
     54          /*
     55           *********************************************************************************************************
     56           *                                       LOCAL GLOBAL VARIABLES
     57           *********************************************************************************************************
     58           */
     59          

   \                                 In section .bss, align 4
     60          static OS_STK App_TaskStartStk[APP_TASK_START_STK_SIZE];
   \                     App_TaskStartStk:
   \        0x0                      DS8 512
     61          static OS_STK App_TaskUserIFStk[APP_TASK_USER_IF_STK_SIZE];
     62          static OS_STK App_TaskKbdStk[APP_TASK_KBD_STK_SIZE]; //지워도 됨 원래 예시에 있던 코드//
     63          

   \                                 In section .data, align 4
     64          static OS_STK ADC_TaskStartStk[APP_TASK_START_STK_SIZE]; // ADC 값을 받아오는 태스크를 위해 스택을 잡는다.
     65          static OS_STK LED_TaskStartStk[APP_TASK_START_STK_SIZE]; //LED 작동하는 태스크를 위해 스택 잡음
     66          static OS_STK Cooling_TaskStartStk[APP_TASK_START_STK_SIZE]; //  DC 쿨링 팬을 구동하는 태스크를 위해 스택 잡음
     67          static OS_STK Water_TaskStartStk[APP_TASK_START_STK_SIZE]; // 서보 모터를 구동하는 태스크를 위해 스택 잡음
     68          
     69          typedef unsigned int uint32;
     70          typedef unsigned short uint16;
     71          
     72          static OS_EVENT      *LightMbox; // 빛의 양을 가지는 메일박스
     73          static OS_EVENT      *TempMbox; // 온도 값을 가지는 메일박스
     74          static OS_EVENT      *SoilMbox; // 토양의 수분을 가지는 메일박스
     75          
     76          uint32 ADC_ValueTab[3]; // DMA 를 통해 ADC의 아날로그 값을 저장하는 메모리 공간
     77          uint32 ADC_Value[3]; // 아날로그 값을 실제 사용하는 데이터에 맞게 변환된 메모리 공간
     78          uint16 Pulse[2]= { 2300, 700 }; // 서보모터의 각도 90도, -90도
   \                     Pulse:
   \        0x0   0x08FC 0x02BC      DC16 2'300, 700
   \                     ADC_ValueTab:
   \        0x4   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     ADC_Value:
   \       0x10   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x1C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \       0x20   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \       0x24   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \       0x28   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x38   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x48   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x58   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x68   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x78   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x88   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0x98   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0xA8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0xB8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0xC8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0xD8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0xE8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \       0xF8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x108   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x118   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x128   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x138   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x148   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x158   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x168   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x178   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x188   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x198   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x1A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x1B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x1C8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x1D8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x1E8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x1F8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x208   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x218   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x228   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x238   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x248   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x258   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x268   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x278   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x288   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x298   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x2A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x2B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x2C8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x2D8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x2E8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x2F8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x308   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x318   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x328   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x338   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x348   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x358   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x368   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x378   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x388   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x398   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x3A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x3B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x3C8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x3D8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x3E8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x3F8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x408   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x418   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x428   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x438   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x448   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x458   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x468   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x478   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x488   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x498   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x4A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x4B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x4C8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x4D8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x4E8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x4F8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x508   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x518   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x528   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x538   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x548   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x558   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x568   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x578   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x588   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x598   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x5A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x5B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x5C8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x5D8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x5E8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x5F8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x608   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x618   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x628   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x638   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x648   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x658   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x668   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x678   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x688   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x698   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x6A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x6B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x6C8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x6D8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x6E8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x6F8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x708   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x718   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x728   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x738   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x748   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x758   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x768   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x778   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x788   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x798   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x7A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x7B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x7C8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x7D8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x7E8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x7F8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x808   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \      0x818   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     79          
     80          #if ((APP_OS_PROBE_EN == DEF_ENABLED) && \
     81          	(APP_PROBE_COM_EN == DEF_ENABLED) && \
     82          	(PROBE_COM_STAT_EN == DEF_ENABLED))

   \                                 In section .bss, align 4
   \        0x0                      DS8 4
     83          static CPU_FP32 App_ProbeComRxPktSpd;

   \                                 In section .bss, align 4
   \        0x0                      DS8 4
     84          static CPU_FP32 App_ProbeComTxPktSpd;

   \                                 In section .bss, align 4
   \        0x0                      DS8 4
     85          static CPU_FP32 App_ProbeComTxSymSpd;

   \                                 In section .bss, align 4
   \        0x0                      DS8 4
     86          static CPU_FP32 App_ProbeComTxSymByteSpd;
     87          

   \                                 In section .bss, align 4
     88          static CPU_INT32U App_ProbeComRxPktLast;
   \                     App_ProbeComRxPktLast:
   \        0x0                      DS8 4
   \        0x4                      DS8 4
   \        0x8                      DS8 4
   \        0xC                      DS8 4
   \       0x10                      DS8 4
   \       0x14                      DS8 4
     89          static CPU_INT32U App_ProbeComTxPktLast;
     90          static CPU_INT32U App_ProbeComTxSymLast;
     91          static CPU_INT32U App_ProbeComTxSymByteLast;
     92          
     93          static CPU_INT32U App_ProbeComCtrLast;
     94          #endif
     95          
     96          #if (APP_OS_PROBE_EN == DEF_ENABLED)
     97          static CPU_INT32U App_ProbeCounts;

   \                                 In section .bss, align 1
   \        0x0                      DS8 1
     98          static CPU_BOOLEAN App_ProbeB1;
     99          
    100          #endif
    101          
    102          
    103          /*
    104           *********************************************************************************************************
    105           *                                      LOCAL FUNCTION PROTOTYPES
    106           *********************************************************************************************************
    107           */
    108          
    109          static void  App_EventCreate(void); // 메일 박스 만드는 함수
    110          static void  App_TaskStart(void *p_arg); // 태스크를 시작하는 함수
    111          
    112          static void ADC_Task(void* parg); // 적외선 센서 값 받아오는 함수//
    113          static void LED_Task(void* parg); // 적외선 센서를 받아 LED를 켜는 함수//
    114          static void Cooling_Task(void* parg); // 적외선 센서 값을 바탕으로 모터를 구동하는 함수//
    115          static void Water_Task(void* parg); // 적외선 센서 값을 바탕으로 모터를 구동하는 함수//
    116          
    117          static void RCC_Configure(void);
    118          static void GPIO_Configure(void);
    119          static void ADC_Configure(void);
    120          static void DMA_Configure(void);
    121          static void TIM_Init(void);
    122          static void  openDoor(void);
    123          static void  closeDoor(void);
    124          static void  Cooling(void);
    125          static void  Stop(void);
    126          static void  delay(void);
    127          
    128          static void  App_DispScr_SignOn(void);
    129          static void  App_DispScr_TaskNames(void);
    130          
    131          #if ((APP_PROBE_COM_EN == DEF_ENABLED) || \
    132          	(APP_OS_PROBE_EN == DEF_ENABLED))
    133          static void  App_InitProbe(void);
    134          #endif
    135          
    136          #if (APP_OS_PROBE_EN == DEF_ENABLED)
    137          static void  App_ProbeCallback(void);
    138          #endif
    139          
    140          
    141          
    142          
    143          /*
    144           *********************************************************************************************************
    145           *                                                main()
    146           *
    147           * Description : This is the standard entry point for C code.  It is assumed that your code will call
    148           *               main() once you have performed all necessary initialization.
    149           *
    150           * Argument(s) : none.
    151           *
    152           * Return(s)   : none.
    153           *********************************************************************************************************
    154           */
    155          

   \                                 In section .text, align 2, keep-with-next
    156          int  main(void)
    157          {
   \                     main: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0xB086             SUB      SP,SP,#+24
    158          	CPU_INT08U os_err;
    159          
    160          	/* Disable all ints until we are ready to accept them.  */
    161          	BSP_IntDisAll();
   \        0x4   0x....'....        BL       BSP_IntDisAll
    162          
    163          
    164          	/* Initialize "uC/OS-II, The Real-Time Kernel".         */
    165          	/* IDLE Task와 Statistics Task 생성                      */
    166          	OSInit();
   \        0x8   0x....'....        BL       OSInit
    167          
    168          	/* Create the start task.                               */
    169          	/* OSTaskCreatExt()                                     */
    170          	/* OSTaskCreate()와 다르게 Stack을 검사할수 있는 기능을 가짐 */
    171          	os_err = OSTaskCreateExt((void (*)(void *))App_TaskStart, // Task가 수행할 함수
    172          				 (void* )0,                     // Task로 넘겨줄 인자
    173          				 (OS_STK* )&App_TaskStartStk[APP_TASK_START_STK_SIZE - 1],     // Task가 할당될 Stack의 Top을 가리키는 주소
    174          				 (INT8U           )APP_TASK_START_PRIO,// Task의 우선 순위
    175          				 (INT16U          )APP_TASK_START_PRIO,// Task를 지칭하는 유일한 식별자, Task 갯수의 극복을 위해서 사용할 예정, 현재는 우선 순위와 같게끔 설정
    176          				 (OS_STK* )&App_TaskStartStk[0],     // Task가 할당될 Stack의 마지막을 가리키는 주소, Stack 검사용으로 사용
    177          				 (INT32U          )APP_TASK_START_STK_SIZE,// Task Stack의 크기를 의미
    178          				 (void* )0,       // Task Control Block 활용시 사용
    179          				 (INT16U          )(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK));// Task 생성 옵션 - 초기화 시 Stack을 0으로 채울 것인지, 부동 소수점 연산 장치 사용할 것인지 등 설정
   \        0xC   0x2200             MOVS     R2,#+0
   \        0xE   0x....'....        LDR.W    R0,??DataTable10
   \       0x12   0x9203             STR      R2,[SP, #+12]
   \       0x14   0x2103             MOVS     R1,#+3
   \       0x16   0x2380             MOVS     R3,#+128
   \       0x18   0x9104             STR      R1,[SP, #+16]
   \       0x1A   0x9302             STR      R3,[SP, #+8]
   \       0x1C   0x9001             STR      R0,[SP, #+4]
   \       0x1E   0x2403             MOVS     R4,#+3
   \       0x20   0xF500 0x72FE      ADD      R2,R0,#+508
   \       0x24   0x9400             STR      R4,[SP, #+0]
   \       0x26   0x2303             MOVS     R3,#+3
   \       0x28   0x2100             MOVS     R1,#+0
   \       0x2A   0x....'....        ADR.W    R0,App_TaskStart
   \       0x2E   0x....'....        BL       OSTaskCreateExt
   \       0x32   0xF88D 0x0014      STRB     R0,[SP, #+20]
    180          
    181          #if (OS_TASK_NAME_SIZE >= 11)
    182          	OSTaskNameSet(APP_TASK_START_PRIO, (CPU_INT08U*)"Start Task", &os_err);
   \       0x36   0xAA05             ADD      R2,SP,#+20
   \       0x38   0x....'....        ADR.W    R1,?_0
   \       0x3C   0x2003             MOVS     R0,#+3
   \       0x3E   0x....'....        BL       OSTaskNameSet
    183          #endif
    184          
    185          	OSStart();                                              /* Start multitasking (i.e. give control to uC/OS-II).  */
   \       0x42   0x....'....        BL       OSStart
    186          
    187          	return(0);
   \       0x46   0x2000             MOVS     R0,#+0
   \       0x48   0xB006             ADD      SP,SP,#+24
   \       0x4A   0xBD10             POP      {R4,PC}          ;; return
    188          }
    189          

   \                                 In section .text, align 4, keep-with-next
    190          static void  App_TaskStart(void *p_arg)
    191          {
   \                     App_TaskStart: (+1)
   \        0x0   0xB578             PUSH     {R3-R6,LR}
   \        0x2   0xB08B             SUB      SP,SP,#+44
    192          
    193          	CPU_INT32U i;
    194          	CPU_INT32U j;
    195          	CPU_INT32U dly;
    196          	CPU_INT08U os_err;
    197          
    198          	(void) p_arg;
    199          
    200          	BSP_Init(); /* Initialize BSP functions.                            */
   \        0x4   0x....'....        BL       BSP_Init
    201          	OS_CPU_SysTickInit(); /* Initialize the SysTick.                              */
   \        0x8   0x....'....        BL       OS_CPU_SysTickInit
    202          
    203          
    204          #if (OS_TASK_STAT_EN > 0)
    205          	OSStatInit();                                           /* Determine CPU capacity.                              */
   \        0xC   0x....'....        BL       OSStatInit
    206          #endif
    207          
    208          
    209          #if ((APP_PROBE_COM_EN == DEF_ENABLED) || \
    210          	(APP_OS_PROBE_EN == DEF_ENABLED))
    211          	App_InitProbe();
   \       0x10   0x....'....        BL       OSProbe_Init
   \       0x14   0x....'....        ADR.W    R0,App_ProbeCallback
   \       0x18   0x....'....        LDR.W    R4,??DataTable10_1
   \       0x1C   0x....'....        LDR.W    R6,??DataTable10_2  ;; 0x40011000
   \       0x20   0x....'....        BL       OSProbe_SetCallback
   \       0x24   0x20FA             MOVS     R0,#+250
   \       0x26   0x....'....        BL       OSProbe_SetDelay
   \       0x2A   0x....'....        BL       ProbeCom_Init
    212          #endif
    213          
    214          	/* Create application events.             */
    215          	/* Task간 통신을 위한 MailBox 생성                        */
    216          
    217          	App_EventCreate();
   \       0x2E   0x2000             MOVS     R0,#+0
   \       0x30   0x....'....        BL       OSMboxCreate
   \       0x34   0x61E0             STR      R0,[R4, #+28]
   \       0x36   0xF44F 0x7580      MOV      R5,#+256
   \       0x3A   0x2000             MOVS     R0,#+0
   \       0x3C   0x....'....        BL       OSMboxCreate
   \       0x40   0x6220             STR      R0,[R4, #+32]
   \       0x42   0x2000             MOVS     R0,#+0
   \       0x44   0x....'....        BL       OSMboxCreate
   \       0x48   0x6260             STR      R0,[R4, #+36]
   \       0x4A   0x466A             MOV      R2,SP
   \       0x4C   0x69E0             LDR      R0,[R4, #+28]
   \       0x4E   0x....'....        ADR.W    R1,?_1
   \       0x52   0x....'....        BL       OSEventNameSet
   \       0x56   0x6A20             LDR      R0,[R4, #+32]
   \       0x58   0x....'....        ADR.W    R1,?_2
   \       0x5C   0x466A             MOV      R2,SP
   \       0x5E   0x....'....        BL       OSEventNameSet
   \       0x62   0x6A60             LDR      R0,[R4, #+36]
   \       0x64   0x....'....        ADR.W    R1,?_3
   \       0x68   0x466A             MOV      R2,SP
   \       0x6A   0x....'....        BL       OSEventNameSet
    218          	RCC_Configure();
   \       0x6E   0x2101             MOVS     R1,#+1
   \       0x70   0xF44F 0x7007      MOV      R0,#+540
   \       0x74   0x....'....        BL       RCC_APB2PeriphClockCmd
   \       0x78   0x2101             MOVS     R1,#+1
   \       0x7A   0x2001             MOVS     R0,#+1
   \       0x7C   0x....'....        BL       RCC_AHBPeriphClockCmd
   \       0x80   0x2101             MOVS     R1,#+1
   \       0x82   0x2002             MOVS     R0,#+2
   \       0x84   0x....'....        BL       RCC_APB1PeriphClockCmd
   \       0x88   0x2101             MOVS     R1,#+1
   \       0x8A   0x2004             MOVS     R0,#+4
   \       0x8C   0x....'....        BL       RCC_APB1PeriphClockCmd
   \       0x90   0x2101             MOVS     R1,#+1
   \       0x92   0x2001             MOVS     R0,#+1
   \       0x94   0x....'....        BL       RCC_APB2PeriphClockCmd
    219          	GPIO_Configure();
   \       0x98   0x2100             MOVS     R1,#+0
   \       0x9A   0xF88D 0x1003      STRB     R1,[SP, #+3]
   \       0x9E   0x2207             MOVS     R2,#+7
   \       0xA0   0xF8AD 0x2000      STRH     R2,[SP, #+0]
   \       0xA4   0x4669             MOV      R1,SP
   \       0xA6   0x....             LDR.N    R0,??DataTable10_3  ;; 0x40010800
   \       0xA8   0x....'....        BL       GPIO_Init
   \       0xAC   0x2010             MOVS     R0,#+16
   \       0xAE   0x2103             MOVS     R1,#+3
   \       0xB0   0xF88D 0x0003      STRB     R0,[SP, #+3]
   \       0xB4   0xF88D 0x1002      STRB     R1,[SP, #+2]
   \       0xB8   0x....'....        BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_19: (+1)
   \       0xBC   0x2118             MOVS     R1,#+24
   \       0xBE   0xF88D 0x1003      STRB     R1,[SP, #+3]
   \       0xC2   0x2203             MOVS     R2,#+3
   \       0xC4   0xF88D 0x2002      STRB     R2,[SP, #+2]
   \       0xC8   0xF8AD 0x5000      STRH     R5,[SP, #+0]
   \       0xCC   0x4669             MOV      R1,SP
   \       0xCE   0x....             LDR.N    R0,??DataTable10_4  ;; 0x40010c00
   \       0xD0   0x....'....        BL       GPIO_Init
   \       0xD4   0x2118             MOVS     R1,#+24
   \       0xD6   0xF88D 0x1003      STRB     R1,[SP, #+3]
   \       0xDA   0x2203             MOVS     R2,#+3
   \       0xDC   0xF44F 0x7500      MOV      R5,#+512
   \       0xE0   0xF88D 0x2002      STRB     R2,[SP, #+2]
   \       0xE4   0x....'....        BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_18: (+1)
   \       0xE8   0x2101             MOVS     R1,#+1
   \       0xEA   0x....             LDR.N    R0,??DataTable10_5  ;; 0x1a0c00
   \       0xEC   0x....             LDR.N    R6,??DataTable10_6  ;; 0x40020008
   \       0xEE   0x....'....        BL       GPIO_PinRemapConfig
    220          	DMA_Configure();
   \       0xF2   0x4630             MOV      R0,R6
   \       0xF4   0x....'....        BL       DMA_DeInit
   \       0xF8   0x1D21             ADDS     R1,R4,#+4
   \       0xFA   0x9101             STR      R1,[SP, #+4]
   \       0xFC   0x2200             MOVS     R2,#+0
   \       0xFE   0x2103             MOVS     R1,#+3
   \      0x100   0x9103             STR      R1,[SP, #+12]
   \      0x102   0x9202             STR      R2,[SP, #+8]
   \      0x104   0x2180             MOVS     R1,#+128
   \      0x106   0x9105             STR      R1,[SP, #+20]
   \      0x108   0x9204             STR      R2,[SP, #+16]
   \      0x10A   0xF44F 0x6100      MOV      R1,#+2048
   \      0x10E   0x9107             STR      R1,[SP, #+28]
   \      0x110   0x2220             MOVS     R2,#+32
   \      0x112   0x9208             STR      R2,[SP, #+32]
   \      0x114   0xF44F 0x5100      MOV      R1,#+8192
   \      0x118   0x....             LDR.N    R0,??DataTable10_7  ;; 0x4001244c
   \      0x11A   0x9000             STR      R0,[SP, #+0]
   \      0x11C   0x9109             STR      R1,[SP, #+36]
   \      0x11E   0x2200             MOVS     R2,#+0
   \      0x120   0x920A             STR      R2,[SP, #+40]
   \      0x122   0x9506             STR      R5,[SP, #+24]
   \      0x124   0x4669             MOV      R1,SP
   \      0x126   0x4630             MOV      R0,R6
   \      0x128   0x....'....        BL       DMA_Init
   \      0x12C   0x2101             MOVS     R1,#+1
   \      0x12E   0x4630             MOV      R0,R6
   \      0x130   0x....'....        BL       DMA_Cmd
    221          	ADC_Configure();
   \      0x134   0x2100             MOVS     R1,#+0
   \      0x136   0x9100             STR      R1,[SP, #+0]
   \      0x138   0x2201             MOVS     R2,#+1
   \      0x13A   0x9103             STR      R1,[SP, #+12]
   \      0x13C   0xF88D 0x2004      STRB     R2,[SP, #+4]
   \      0x140   0xF88D 0x2005      STRB     R2,[SP, #+5]
   \      0x144   0x2103             MOVS     R1,#+3
   \      0x146   0xF88D 0x1010      STRB     R1,[SP, #+16]
   \      0x14A   0xF44F 0x2260      MOV      R2,#+917504
   \      0x14E   0x9202             STR      R2,[SP, #+8]
   \      0x150   0x4669             MOV      R1,SP
   \      0x152   0x....             LDR.N    R5,??DataTable10_8  ;; 0x40012400
   \      0x154   0x4628             MOV      R0,R5
   \      0x156   0x....'....        BL       ADC_Init
   \      0x15A   0x2305             MOVS     R3,#+5
   \      0x15C   0x2201             MOVS     R2,#+1
   \      0x15E   0x2100             MOVS     R1,#+0
   \      0x160   0x4628             MOV      R0,R5
   \      0x162   0x....'....        BL       ADC_RegularChannelConfig
   \      0x166   0x2305             MOVS     R3,#+5
   \      0x168   0x2202             MOVS     R2,#+2
   \      0x16A   0x2101             MOVS     R1,#+1
   \      0x16C   0x4628             MOV      R0,R5
   \      0x16E   0x....'....        BL       ADC_RegularChannelConfig
   \      0x172   0x2305             MOVS     R3,#+5
   \      0x174   0x2203             MOVS     R2,#+3
   \      0x176   0x2102             MOVS     R1,#+2
   \      0x178   0x4628             MOV      R0,R5
   \      0x17A   0x....'....        BL       ADC_RegularChannelConfig
   \      0x17E   0x2101             MOVS     R1,#+1
   \      0x180   0x4628             MOV      R0,R5
   \      0x182   0x....'....        BL       ADC_DMACmd
   \      0x186   0x2101             MOVS     R1,#+1
   \      0x188   0x4628             MOV      R0,R5
   \      0x18A   0x....'....        BL       ADC_Cmd
   \      0x18E   0x4628             MOV      R0,R5
   \      0x190   0x....'....        BL       ADC_ResetCalibration
   \                     ??App_TaskStart_0: (+1)
   \      0x194   0x4628             MOV      R0,R5
   \      0x196   0x....'....        BL       ADC_GetResetCalibrationStatus
   \      0x19A   0x2800             CMP      R0,#+0
   \      0x19C   0xD1FA             BNE.N    ??App_TaskStart_0
   \      0x19E   0x4628             MOV      R0,R5
   \      0x1A0   0x....'....        BL       ADC_StartCalibration
   \                     ??App_TaskStart_1: (+1)
   \      0x1A4   0x4628             MOV      R0,R5
   \      0x1A6   0x....'....        BL       ADC_GetCalibrationStatus
   \      0x1AA   0x2800             CMP      R0,#+0
   \      0x1AC   0xD1FA             BNE.N    ??App_TaskStart_1
   \      0x1AE   0x2101             MOVS     R1,#+1
   \      0x1B0   0x4628             MOV      R0,R5
   \      0x1B2   0x....'....        BL       ADC_SoftwareStartConvCmd
    222          	TIM_Init();
   \      0x1B6   0x....             LDR.N    R6,??DataTable10_9  ;; 0x40000400
   \      0x1B8   0x2108             MOVS     R1,#+8
   \      0x1BA   0x4630             MOV      R0,R6
   \      0x1BC   0x....'....        BL       TIM_OC4PreloadConfig
   \      0x1C0   0x2101             MOVS     R1,#+1
   \      0x1C2   0x4630             MOV      R0,R6
   \      0x1C4   0x....'....        BL       TIM_ARRPreloadConfig
   \      0x1C8   0x2101             MOVS     R1,#+1
   \      0x1CA   0x4630             MOV      R0,R6
   \      0x1CC   0x....'....        BL       TIM_Cmd
   \      0x1D0   0x2107             MOVS     R1,#+7
   \      0x1D2   0xF8AD 0x1000      STRH     R1,[SP, #+0]
   \      0x1D6   0x2200             MOVS     R2,#+0
   \      0x1D8   0xF644 0x651F      MOVW     R5,#+19999
   \      0x1DC   0x....'....        BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_17: (+1)
   \      0x1E0   0x....             LDR.N    R6,??DataTable10_10  ;; 0x40000800
   \      0x1E2   0x2108             MOVS     R1,#+8
   \      0x1E4   0x4630             MOV      R0,R6
   \      0x1E6   0x....'....        BL       TIM_OC3PreloadConfig
   \      0x1EA   0x2101             MOVS     R1,#+1
   \      0x1EC   0x4630             MOV      R0,R6
   \      0x1EE   0x....'....        BL       TIM_ARRPreloadConfig
   \      0x1F2   0x2101             MOVS     R1,#+1
   \      0x1F4   0x4630             MOV      R0,R6
   \      0x1F6   0x....'....        BL       TIM_Cmd
   \      0x1FA   0x2107             MOVS     R1,#+7
   \      0x1FC   0xF8AD 0x1000      STRH     R1,[SP, #+0]
   \      0x200   0x2200             MOVS     R2,#+0
   \      0x202   0x....'....        BL       ?Subroutine4
    223          
    224          	os_err = OSTaskCreateExt((void (*)(void *)) ADC_Task, // Task가 수행할 함수
    225          			(void*) 0,                     // Task로 넘겨줄 인자
    226          			(OS_STK*) &ADC_TaskStartStk[APP_TASK_START_STK_SIZE - 1], // Task가 할당될 Stack의 Top을 가리키는 주소
    227          			(INT8U) 5,     // Task의 우선 순위
    228          			(INT16U) 5, // Task를 지칭하는 유일한 식별자, Task 갯수의 극복을 위해서 사용할 예정, 현재는 우선 순위와 같게끔 설정
    229          			(OS_STK*) &ADC_TaskStartStk[0], // Task가 할당될 Stack의 마지막을 가리키는 주소, Stack 검사용으로 사용
    230          			(INT32U) APP_TASK_START_STK_SIZE,     // Task Stack의 크기를 의미
    231          			(void*) 0,       // Task Control Block 활용시 사용
    232          			(INT16U)(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK)); // Task 생성 옵션 - 초기화 시 Stack을 0으로 채울 것인지, 부동 소수점 연산 장치 사용할 것인지 등 설정
   \                     ??CrossCallReturnLabel_16: (+1)
   \      0x206   0x....'....        BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_12: (+1)
   \      0x20A   0xF104 0x0328      ADD      R3,R4,#+40
   \      0x20E   0x2005             MOVS     R0,#+5
   \      0x210   0x....'....        BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_5: (+1)
   \      0x214   0x2305             MOVS     R3,#+5
   \      0x216   0xF504 0x7209      ADD      R2,R4,#+548
   \      0x21A   0x....'....        ADR.W    R0,ADC_Task
   \      0x21E   0x....'....        BL       OSTaskCreateExt
    233          
    234          	os_err = OSTaskCreateExt((void (*)(void *)) LED_Task, // Task가 수행할 함수
    235          			(void*) 0,                     // Task로 넘겨줄 인자
    236          			(OS_STK*) &LED_TaskStartStk[APP_TASK_START_STK_SIZE - 1], // Task가 할당될 Stack의 Top을 가리키는 주소
    237          			(INT8U) 6,     // Task의 우선 순위
    238          			(INT16U) 6, // Task를 지칭하는 유일한 식별자, Task 갯수의 극복을 위해서 사용할 예정, 현재는 우선 순위와 같게끔 설정
    239          			(OS_STK*) &LED_TaskStartStk[0], // Task가 할당될 Stack의 마지막을 가리키는 주소, Stack 검사용으로 사용
    240          			(INT32U) APP_TASK_START_STK_SIZE,     // Task Stack의 크기를 의미
    241          			(void*) 0,       // Task Control Block 활용시 사용
    242          			(INT16U)(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK)); // Task 생성 옵션 - 초기화 시 Stack을 0으로 채울 것인지, 부동 소수점 연산 장치 사용할 것인지 등 설정
   \      0x222   0x....'....        BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_13: (+1)
   \      0x226   0xF504 0x730A      ADD      R3,R4,#+552
   \      0x22A   0x2006             MOVS     R0,#+6
   \      0x22C   0x....'....        BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_6: (+1)
   \      0x230   0x2306             MOVS     R3,#+6
   \      0x232   0xF204 0x4224      ADDW     R2,R4,#+1060
   \      0x236   0x....'....        ADR.W    R0,LED_Task
   \      0x23A   0x....'....        BL       OSTaskCreateExt
    243          
    244          	os_err = OSTaskCreateExt((void (*)(void *)) Cooling_Task, // Task가 수행할 함수
    245          			(void*) 0,                     // Task로 넘겨줄 인자
    246          			(OS_STK*) &Cooling_TaskStartStk[APP_TASK_START_STK_SIZE - 1], // Task가 할당될 Stack의 Top을 가리키는 주소
    247          			(INT8U) 7,     // Task의 우선 순위
    248          			(INT16U) 7, // Task를 지칭하는 유일한 식별자, Task 갯수의 극복을 위해서 사용할 예정, 현재는 우선 순위와 같게끔 설정
    249          			(OS_STK*) &Cooling_TaskStartStk[0], // Task가 할당될 Stack의 마지막을 가리키는 주소, Stack 검사용으로 사용
    250          			(INT32U) APP_TASK_START_STK_SIZE,     // Task Stack의 크기를 의미
    251          			(void*) 0,       // Task Control Block 활용시 사용
    252          			(INT16U)(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK)); // Task 생성 옵션 - 초기화 시 Stack을 0으로 채울 것인지, 부동 소수점 연산 장치 사용할 것인지 등 설정
   \      0x23E   0x....'....        BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_14: (+1)
   \      0x242   0xF504 0x6385      ADD      R3,R4,#+1064
   \      0x246   0x2007             MOVS     R0,#+7
   \      0x248   0x....'....        BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_7: (+1)
   \      0x24C   0x2307             MOVS     R3,#+7
   \      0x24E   0xF204 0x6224      ADDW     R2,R4,#+1572
   \      0x252   0x....'....        ADR.W    R0,Cooling_Task
   \      0x256   0x....'....        BL       OSTaskCreateExt
    253          
    254          	os_err = OSTaskCreateExt((void (*)(void *)) Water_Task, // Task가 수행할 함수
    255          			(void*) 0,                     // Task로 넘겨줄 인자
    256          			(OS_STK*) &Water_TaskStartStk[APP_TASK_START_STK_SIZE - 1], // Task가 할당될 Stack의 Top을 가리키는 주소
    257          			(INT8U) 8,     // Task의 우선 순위
    258          			(INT16U) 8, // Task를 지칭하는 유일한 식별자, Task 갯수의 극복을 위해서 사용할 예정, 현재는 우선 순위와 같게끔 설정
    259          			(OS_STK*) &Water_TaskStartStk[0], // Task가 할당될 Stack의 마지막을 가리키는 주소, Stack 검사용으로 사용
    260          			(INT32U) APP_TASK_START_STK_SIZE,     // Task Stack의 크기를 의미
    261          			(void*) 0,       // Task Control Block 활용시 사용
    262          			(INT16U)(OS_TASK_OPT_STK_CLR | OS_TASK_OPT_STK_CHK)); // Task 생성 옵션 - 초기화 시 Stack을 0으로 채울 것인지, 부동 소수점 연산 장치 사용할 것인지 등 설정
   \      0x25A   0x....'....        BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_15: (+1)
   \      0x25E   0xF504 0x63C5      ADD      R3,R4,#+1576
   \      0x262   0x2008             MOVS     R0,#+8
   \      0x264   0x....'....        BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_8: (+1)
   \      0x268   0x2308             MOVS     R3,#+8
   \      0x26A   0xF604 0x0224      ADDW     R2,R4,#+2084
   \      0x26E   0x....'....        ADR.W    R0,Water_Task
   \      0x272   0x....'....        BL       OSTaskCreateExt
    263          
    264          	while (DEF_TRUE) {
    265          		OSTimeDlyHMSM(0, 0, 0, 100);
   \                     ??App_TaskStart_2: (+1)
   \      0x276   0x....'....        BL       ?Subroutine0
    266          	}
   \                     ??CrossCallReturnLabel_4: (+1)
   \      0x27A   0xE7FC             B.N      ??App_TaskStart_2
    267          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3: (+1)
   \        0x0   0x2003             MOVS     R0,#+3
   \        0x2   0x9004             STR      R0,[SP, #+16]
   \        0x4   0x2280             MOVS     R2,#+128
   \        0x6   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1: (+1)
   \        0x0   0x2100             MOVS     R1,#+0
   \        0x2   0x9202             STR      R2,[SP, #+8]
   \        0x4   0x9301             STR      R3,[SP, #+4]
   \        0x6   0x9000             STR      R0,[SP, #+0]
   \        0x8   0x9103             STR      R1,[SP, #+12]
   \        0xA   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0: (+1)
   \        0x0   0x2364             MOVS     R3,#+100
   \                     ??Subroutine0_0: (+1)
   \        0x2   0x2200             MOVS     R2,#+0
   \        0x4   0x2100             MOVS     R1,#+0
   \        0x6   0x2000             MOVS     R0,#+0
   \        0x8   0x....'....        B.W      OSTimeDlyHMSM
    268          

   \                                 In section .text, align 4, keep-with-next
    269          static void ADC_Task(void* parg){ /*  입력받은 ADC를 다른 task에 post해주는 함수 */
   \                     ADC_Task: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
   \        0x2   0x....             LDR.N    R4,??DataTable10_1
    270          
    271                  while(DEF_TRUE){
    272          
    273          		ADC_Value[0] = ADC_ValueTab[0]; // Light value
    274          		ADC_Value[1] = ADC_ValueTab[1] * 500 / 4095; // Temperature value
   \                     ??ADC_Task_0: (+1)
   \        0x4   0x68A0             LDR      R0,[R4, #+8]
   \        0x6   0x6861             LDR      R1,[R4, #+4]
   \        0x8   0x6121             STR      R1,[R4, #+16]
   \        0xA   0xF44F 0x72FA      MOV      R2,#+500
   \        0xE   0x4350             MULS     R0,R2,R0
   \       0x10   0xF640 0x73FF      MOVW     R3,#+4095
    275          		ADC_Value[2] = ADC_ValueTab[2]; // Soil moisture value
   \       0x14   0x68E2             LDR      R2,[R4, #+12]
   \       0x16   0x61A2             STR      R2,[R4, #+24]
   \       0x18   0xFBB0 0xF3F3      UDIV     R3,R0,R3
   \       0x1C   0x6163             STR      R3,[R4, #+20]
    276          
    277                  OSMboxPost(LightMbox,(void*)(ADC_Value[0]));
   \       0x1E   0x69E0             LDR      R0,[R4, #+28]
   \       0x20   0x....'....        BL       OSMboxPost
    278                  OSMboxPost(TempMbox,(void*)(ADC_Value[1]));
   \       0x24   0x6961             LDR      R1,[R4, #+20]
   \       0x26   0x6A20             LDR      R0,[R4, #+32]
   \       0x28   0x....'....        BL       OSMboxPost
    279                  OSMboxPost(SoilMbox,(void*)(ADC_Value[2]));
   \       0x2C   0x69A1             LDR      R1,[R4, #+24]
   \       0x2E   0x6A60             LDR      R0,[R4, #+36]
   \       0x30   0x....'....        BL       OSMboxPost
    280          
    281          
    282                  OSTimeDlyHMSM(0,0,0,100);
   \       0x34   0x....'....        BL       ?Subroutine0
    283          
    284                  }
   \                     ??CrossCallReturnLabel_3: (+1)
   \       0x38   0xE7E4             B.N      ??ADC_Task_0
    285          }
    286          

   \                                 In section .text, align 4, keep-with-next
    287          static void LED_Task(void* parg){
   \                     LED_Task: (+1)
   \        0x0   0xB538             PUSH     {R3-R5,LR}
   \        0x2   0x....             LDR.N    R4,??DataTable10_2  ;; 0x40011000
   \        0x4   0x....             LDR.N    R5,??DataTable10_1
    288          
    289              while(DEF_TRUE){
    290                      CPU_INT08U os_err;
    291                      int ADC_value = (int) OSMboxPend(LightMbox,10,&os_err);
    292          
    293          
    294                      if(ADC_value >30){  /*  빛이 밝은 경우  */
   \                     ??LED_Task_0: (+1)
   \        0x6   0x69E8             LDR      R0,[R5, #+28]
   \        0x8   0x....'....        BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_11: (+1)
   \        0xC   0x281F             CMP      R0,#+31
   \        0xE   0xF44F 0x7180      MOV      R1,#+256
   \       0x12   0x4620             MOV      R0,R4
   \       0x14   0xDA02             BGE.N    ??LED_Task_1
    295                           GPIO_ResetBits(GPIOC,GPIO_Pin_8);
    296                      }
    297                      else{
    298                        GPIO_SetBits(GPIOC,GPIO_Pin_8);
   \       0x16   0x....'....        BL       GPIO_SetBits
   \       0x1A   0xE001             B.N      ??LED_Task_2
    299                      }
   \                     ??LED_Task_1: (+1)
   \       0x1C   0x....'....        BL       GPIO_ResetBits
    300          
    301                        OSTimeDlyHMSM(0,0,0,100);
   \                     ??LED_Task_2: (+1)
   \       0x20   0x....'....        BL       ?Subroutine0
    302              }
   \                     ??CrossCallReturnLabel_2: (+1)
   \       0x24   0xE7EF             B.N      ??LED_Task_0
    303          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2: (+1)
   \        0x0   0x466A             MOV      R2,SP
   \        0x2   0x210A             MOVS     R1,#+10
   \        0x4   0x....'....        B.W      OSMboxPend
    304          

   \                                 In section .text, align 4, keep-with-next
    305          static void Cooling_Task(void* parg){
   \                     Cooling_Task: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
   \        0x4   0x....             LDR.N    R4,??DataTable10_10  ;; 0x40000800
   \        0x6   0x....             LDR.N    R5,??DataTable10_1
    306          
    307             while(DEF_TRUE){
    308                     CPU_INT08U os_err;
    309                     int ADC_value = (int) OSMboxPend(TempMbox,10,&os_err);
    310          
    311          
    312                     if( ADC_value > 60){  /*  온도가 높은 경우 */
   \                     ??Cooling_Task_0: (+1)
   \        0x8   0x6A28             LDR      R0,[R5, #+32]
   \        0xA   0x....'....        BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_10: (+1)
   \        0xE   0x283D             CMP      R0,#+61
   \       0x10   0xDA0A             BGE.N    ??Cooling_Task_1
    313                          Stop();
    314                          delay();
    315                    }
    316                    else{
    317                          Cooling();
   \       0x12   0x2160             MOVS     R1,#+96
   \       0x14   0x2200             MOVS     R2,#+0
   \       0x16   0xF8AD 0x1004      STRH     R1,[SP, #+4]
   \       0x1A   0xF8AD 0x200C      STRH     R2,[SP, #+12]
   \       0x1E   0x2101             MOVS     R1,#+1
   \       0x20   0x882A             LDRH     R2,[R5, #+0]
   \       0x22   0xF8AD 0x1006      STRH     R1,[SP, #+6]
   \       0x26   0xE00A             B.N      ??Cooling_Task_2
    318                          delay();
    319                    }
   \                     ??Cooling_Task_1: (+1)
   \       0x28   0x2160             MOVS     R1,#+96
   \       0x2A   0xF8AD 0x1004      STRH     R1,[SP, #+4]
   \       0x2E   0x2200             MOVS     R2,#+0
   \       0x30   0xF8AD 0x200C      STRH     R2,[SP, #+12]
   \       0x34   0x2101             MOVS     R1,#+1
   \       0x36   0xF8AD 0x1006      STRH     R1,[SP, #+6]
   \       0x3A   0xF240 0x52DC      MOVW     R2,#+1500
   \                     ??Cooling_Task_2: (+1)
   \       0x3E   0xF8AD 0x200A      STRH     R2,[SP, #+10]
   \       0x42   0xA901             ADD      R1,SP,#+4
   \       0x44   0x4620             MOV      R0,R4
   \       0x46   0x....'....        BL       TIM_OC3Init
   \       0x4A   0x....'....        BL       delay
    320          
    321                       OSTimeDlyHMSM(0,0,0,200);
   \       0x4E   0x23C8             MOVS     R3,#+200
   \       0x50   0x....'....        BL       ??Subroutine0_0
    322          
    323             }
   \                     ??CrossCallReturnLabel_1: (+1)
   \       0x54   0xE7D8             B.N      ??Cooling_Task_0
    324          }
    325          

   \                                 In section .text, align 4, keep-with-next
    326          static void Water_Task(void* parg){
   \                     Water_Task: (+1)
   \        0x0   0xB530             PUSH     {R4,R5,LR}
   \        0x2   0xB085             SUB      SP,SP,#+20
   \        0x4   0x....             LDR.N    R4,??DataTable10_9  ;; 0x40000400
   \        0x6   0x....             LDR.N    R5,??DataTable10_1
    327          
    328             while(DEF_TRUE){
    329          
    330                      CPU_INT08U os_err;
    331                      int ADC_value = (int) OSMboxPend(SoilMbox,10,&os_err);
    332          
    333                      if( ADC_value > 1000){  /* 수분 부족 */
   \                     ??Water_Task_0: (+1)
   \        0x8   0x6A68             LDR      R0,[R5, #+36]
   \        0xA   0x....'....        BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_9: (+1)
   \        0xE   0xF240 0x31E9      MOVW     R1,#+1001
   \       0x12   0x4288             CMP      R0,R1
   \       0x14   0xDA0C             BGE.N    ??Water_Task_1
    334                          openDoor();
    335                          delay();
    336                    }
    337                    else{
    338                          closeDoor();
   \       0x16   0x2060             MOVS     R0,#+96
   \       0x18   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   \       0x1C   0x2100             MOVS     R1,#+0
   \       0x1E   0x8868             LDRH     R0,[R5, #+2]
   \       0x20   0xF8AD 0x100C      STRH     R1,[SP, #+12]
   \       0x24   0x2201             MOVS     R2,#+1
   \       0x26   0xF8AD 0x2006      STRH     R2,[SP, #+6]
   \       0x2A   0xF8AD 0x000A      STRH     R0,[SP, #+10]
   \       0x2E   0xE00B             B.N      ??Water_Task_2
    339                          delay();
    340                    }
   \                     ??Water_Task_1: (+1)
   \       0x30   0x2200             MOVS     R2,#+0
   \       0x32   0x2160             MOVS     R1,#+96
   \       0x34   0xF8AD 0x200C      STRH     R2,[SP, #+12]
   \       0x38   0xF8AD 0x1004      STRH     R1,[SP, #+4]
   \       0x3C   0x2101             MOVS     R1,#+1
   \       0x3E   0x882A             LDRH     R2,[R5, #+0]
   \       0x40   0xF8AD 0x1006      STRH     R1,[SP, #+6]
   \       0x44   0xF8AD 0x200A      STRH     R2,[SP, #+10]
   \                     ??Water_Task_2: (+1)
   \       0x48   0xA901             ADD      R1,SP,#+4
   \       0x4A   0x4620             MOV      R0,R4
   \       0x4C   0x....'....        BL       TIM_OC4Init
   \       0x50   0x....'....        BL       delay
    341                       OSTimeDlyHMSM(0,0,0,300);
   \       0x54   0xF44F 0x7396      MOV      R3,#+300
   \       0x58   0x....'....        BL       ??Subroutine0_0
    342             }
   \                     ??CrossCallReturnLabel_0: (+1)
   \       0x5C   0xE7D4             B.N      ??Water_Task_0
    343          }
    344          
    345          
    346          static void RCC_Configure() {
    347          
    348            RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA| RCC_APB2Periph_GPIOB |RCC_APB2Periph_GPIOC| RCC_APB2Periph_ADC1, ENABLE);
    349            RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
    350            RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);
    351            RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4,ENABLE);
    352            RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
    353          
    354          }
    355          
    356          
    357          static void GPIO_Configure() {
    358          
    359          	/* 조도센서, 온도센서, 토양수분 센서 Pin*/
    360          
    361          	GPIO_InitTypeDef GPIO_InitStructure;
    362          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
    363          	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2;
    364          	GPIO_Init(GPIOA, &GPIO_InitStructure);
    365          
    366              /*LED Pin*/
    367          
    368          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    369          	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
    370          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    371          	GPIO_Init(GPIOC, &GPIO_InitStructure);
    372          
    373              /* DC 쿨링 팬  */
    374          
    375              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
    376          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    377          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    378          	GPIO_Init(GPIOB, &GPIO_InitStructure);
    379          
    380              /* Servo moter Pin*/
    381          
    382          	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    383          	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    384          	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    385          	GPIO_Init(GPIOC, &GPIO_InitStructure);
    386          
    387          	GPIO_PinRemapConfig(GPIO_FullRemap_TIM3, ENABLE);
    388          
    389          
    390          }
    391          
    392          
    393          
    394          static void ADC_Configure() {
    395          
    396            ADC_InitTypeDef ADC_InitStructure;
    397          
    398            ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
    399            ADC_InitStructure.ADC_ScanConvMode = ENABLE;
    400            ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
    401            ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
    402            ADC_InitStructure.ADC_NbrOfChannel = 3;
    403            ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
    404          
    405            ADC_Init(ADC1, &ADC_InitStructure);
    406          
    407            ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_55Cycles5);
    408            ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_55Cycles5);
    409            ADC_RegularChannelConfig(ADC1, ADC_Channel_2, 3, ADC_SampleTime_55Cycles5);
    410          
    411            ADC_DMACmd(ADC1, ENABLE);
    412            ADC_Cmd(ADC1, ENABLE);
    413            ADC_ResetCalibration(ADC1);
    414          
    415            while(ADC_GetResetCalibrationStatus(ADC1));
    416          
    417            ADC_StartCalibration(ADC1);
    418          
    419            while(ADC_GetCalibrationStatus(ADC1));
    420          
    421            ADC_SoftwareStartConvCmd(ADC1, ENABLE);
    422          
    423          }
    424          
    425          static void DMA_Configure() {
    426          
    427          	DMA_InitTypeDef DMA_InitStructure;
    428          
    429          	// DMA1 channel1 configuration ----------------------------------------------
    430          	DMA_DeInit(DMA1_Channel1);
    431          	DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32)&ADC1->DR;
    432          	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32)ADC_ValueTab;
    433          	DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
    434          	DMA_InitStructure.DMA_BufferSize = 3;
    435          	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    436          	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
    437          	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word; // 32bit
    438          	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word; // 32bit
    439          	DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
    440          	DMA_InitStructure.DMA_Priority = DMA_Priority_High;
    441          	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
    442          	DMA_Init(DMA1_Channel1, &DMA_InitStructure);
    443          
    444          	// Enable DMA1 Channel1
    445          	DMA_Cmd(DMA1_Channel1, ENABLE);
    446          
    447          }
    448          
    449          
    450          static void openDoor() {
    451          
    452          	TIM_OCInitTypeDef TIM_OCInitStructure;
    453          	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
    454          	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
    455          	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
    456          	TIM_OCInitStructure.TIM_Pulse = Pulse[0];
    457          	TIM_OC4Init(TIM3, &TIM_OCInitStructure);
    458          
    459          }
    460          
    461          
    462          static void closeDoor() {
    463          
    464          	TIM_OCInitTypeDef TIM_OCInitStructure;
    465          	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
    466          	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
    467          	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
    468          	TIM_OCInitStructure.TIM_Pulse = Pulse[1];
    469          	TIM_OC4Init(TIM3, &TIM_OCInitStructure);
    470          
    471          }
    472          
    473          static void Cooling() {
    474          
    475          	TIM_OCInitTypeDef TIM_OCInitStructure;
    476          	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
    477          	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
    478          	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
    479          	TIM_OCInitStructure.TIM_Pulse = Pulse[0];
    480          	TIM_OC3Init(TIM4, &TIM_OCInitStructure);
    481          
    482          }
    483          
    484          static void Stop() {
    485          
    486          	TIM_OCInitTypeDef TIM_OCInitStructure;
    487          	TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM1;
    488          	TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_High;
    489          	TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
    490          	TIM_OCInitStructure.TIM_Pulse = 1500;
    491          	TIM_OC3Init(TIM4, &TIM_OCInitStructure);
    492          
    493          }
    494          
    495          static void TIM_Init() {
    496          
    497          TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    498          
    499          /* TIM3 */
    500          TIM_OC4PreloadConfig(TIM3, TIM_OCPreload_Enable);
    501          TIM_ARRPreloadConfig(TIM3, ENABLE);
    502          TIM_Cmd(TIM3, ENABLE);
    503          
    504          TIM_TimeBaseStructure.TIM_Period = 20000 - 1;
    505          TIM_TimeBaseStructure.TIM_Prescaler = (unsigned short) (8000000 / 1000000) - 1;
    506          TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    507          TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    508          
    509          TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
    510          
    511          /* TIM4 */
    512          TIM_OC3PreloadConfig(TIM4, TIM_OCPreload_Enable);
    513          TIM_ARRPreloadConfig(TIM4, ENABLE);
    514          TIM_Cmd(TIM4, ENABLE);
    515          
    516          TIM_TimeBaseStructure.TIM_Period = 20000 - 1;
    517          TIM_TimeBaseStructure.TIM_Prescaler = (unsigned short) (8000000 / 1000000) - 1;
    518          TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    519          TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    520          
    521          TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);
    522          
    523          }
    524          
    525          
    526          

   \                                 In section .text, align 2, keep-with-next
    527          static void delay(){
    528            for(int i=0; i<100000; i++){}
    529          
    530          }
   \                     delay: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    531          
    532          static void  App_EventCreate(void)
    533          {
    534          #if (OS_EVENT_NAME_SIZE > 12)
    535          	CPU_INT08U os_err;
    536          #endif
    537          
    538          	/* Create MBOX for communication between Kbd and UserIF.*/
    539          	/* Mail Box 생성                                         */
    540          	/* 포인터 크기의 변수를 Task나 Interrupt Service Routine   */
    541          	/* 에서 다른 Task 전달할 때 사용함                         */
    542          	LightMbox = OSMboxCreate((void*) 0);
    543          	TempMbox = OSMboxCreate((void*) 0);
    544          	SoilMbox = OSMboxCreate((void*) 0);
    545          
    546          #if (OS_EVENT_NAME_SIZE > 12)
    547          	OSEventNameSet(LightMbox, "LightMbox", &os_err);
    548                  OSEventNameSet(TempMbox, "TempMbox", &os_err);
    549                  OSEventNameSet(SoilMbox, "SoilMbox", &os_err);
    550          #endif
    551          }
    552          
    553          
    554          /*
    555           *********************************************************************************************************
    556           *                                            App_TaskCreate()
    557           *
    558           * Description : Create the application tasks.
    559           *
    560           * Argument(s) : none.
    561           *
    562           * Return(s)   : none.
    563           *
    564           * Caller(s)   : App_TaskStart().
    565           *
    566           * Note(s)     : none.
    567           *********************************************************************************************************
    568           */
    569          
    570          
    571          
    572          /*
    573           *********************************************************************************************************
    574           *                                          App_DispScr_SignOn()
    575           *
    576           * Description : Display uC/OS-II system information on the LCD.
    577           *
    578           * Argument(s) : none.
    579           *
    580           * Return(s)   : none.
    581           *
    582           * Caller(s)   : App_TaskUserIF().
    583           *
    584           * Note(s)     : none.
    585           *********************************************************************************************************
    586           */
    587          
    588          static void  App_DispScr_SignOn(void)
    589          {
    590          }
    591          
    592          
    593          
    594          /*
    595           *********************************************************************************************************
    596           *                                          App_DispScr_SignOn()
    597           *
    598           * Description : Display uC/OS-II system information on the LCD.
    599           *
    600           * Argument(s) : none.
    601           *
    602           * Return(s)   : none.
    603           *
    604           * Caller(s)   : App_TaskUserIF().
    605           *
    606           * Note(s)     : none.
    607           *********************************************************************************************************
    608           */
    609          
    610          static void  App_DispScr_TaskNames(void)
    611          {
    612          }
    613          
    614          
    615          /*
    616           *********************************************************************************************************
    617           *                                             App_InitProbe()
    618           *
    619           * Description : Initialize uC/Probe target code.
    620           *
    621           * Argument(s) : none.
    622           *
    623           * Return(s)   : none.
    624           *
    625           * Caller(s)   : App_TaskStart().
    626           *
    627           * Note(s)     : none.
    628           *********************************************************************************************************
    629           */
    630          
    631          #if ((APP_PROBE_COM_EN == DEF_ENABLED) || \
    632          	(APP_OS_PROBE_EN == DEF_ENABLED))
    633          static void  App_InitProbe(void)
    634          {
    635          #if (APP_OS_PROBE_EN == DEF_ENABLED)
    636          	(void)App_ProbeCounts;
    637          	(void)App_ProbeB1;
    638          
    639          
    640          #if ((APP_PROBE_COM_EN == DEF_ENABLED) && \
    641          	(PROBE_COM_STAT_EN == DEF_ENABLED))
    642          	(void)App_ProbeComRxPktSpd;
    643          	(void)App_ProbeComTxPktSpd;
    644          	(void)App_ProbeComTxSymSpd;
    645          	(void)App_ProbeComTxSymByteSpd;
    646          #endif
    647          
    648          	OSProbe_Init();
    649          	OSProbe_SetCallback(App_ProbeCallback);
    650          	OSProbe_SetDelay(250);
    651          #endif
    652          
    653          #if (APP_PROBE_COM_EN == DEF_ENABLED)
    654          	ProbeCom_Init();                                        /* Initialize the uC/Probe communications module.       */
    655          #endif
    656          }
    657          #endif
    658          
    659          
    660          /*
    661           *********************************************************************************************************
    662           *                                         AppProbeCallback()
    663           *
    664           * Description : uC/Probe OS plugin callback.
    665           *
    666           * Argument(s) : none.
    667           *
    668           * Return(s)   : none.
    669           *
    670           * Caller(s)   : uC/Probe OS plugin task.
    671           *
    672           * Note(s)     : none.
    673           *********************************************************************************************************
    674           */
    675          
    676          #if (APP_OS_PROBE_EN == DEF_ENABLED)

   \                                 In section .text, align 4, keep-with-next
    677          static void  App_ProbeCallback(void)
    678          {
   \                     App_ProbeCallback: (+1)
   \        0x0   0xB510             PUSH     {R4,LR}
    679          #if ((APP_PROBE_COM_EN == DEF_ENABLED) && \
    680          	(PROBE_COM_STAT_EN == DEF_ENABLED))
    681          	CPU_INT32U ctr_curr;
    682          	CPU_INT32U rxpkt_curr;
    683          	CPU_INT32U txpkt_curr;
    684          	CPU_INT32U sym_curr;
    685          	CPU_INT32U symbyte_curr;
    686          #endif
    687          
    688          
    689          
    690          	App_ProbeCounts++;
   \        0x2   0x....             LDR.N    R4,??DataTable10_11
   \        0x4   0x6961             LDR      R1,[R4, #+20]
   \        0x6   0x1C49             ADDS     R1,R1,#+1
   \        0x8   0x6161             STR      R1,[R4, #+20]
    691          
    692          	App_ProbeB1 = BSP_PB_GetStatus(1);
   \        0xA   0x2001             MOVS     R0,#+1
   \        0xC   0x....'....        BL       BSP_PB_GetStatus
    693          
    694          
    695          
    696          
    697          #if ((APP_PROBE_COM_EN == DEF_ENABLED) && \
    698          	(PROBE_COM_STAT_EN == DEF_ENABLED))
    699          	ctr_curr = OSTime;
   \       0x10   0x....             LDR.N    R1,??DataTable10_12
   \       0x12   0x6808             LDR      R0,[R1, #+0]
    700          	rxpkt_curr = ProbeCom_RxPktCtr;
    701          	txpkt_curr = ProbeCom_TxPktCtr;
    702          	sym_curr = ProbeCom_TxSymCtr;
    703          	symbyte_curr = ProbeCom_TxSymByteCtr;
    704          
    705          	if ((ctr_curr - App_ProbeComCtrLast) >= OS_TICKS_PER_SEC) {
   \       0x14   0x6922             LDR      R2,[R4, #+16]
   \       0x16   0x1A82             SUBS     R2,R0,R2
   \       0x18   0xF5B2 0x7F7A      CMP      R2,#+1000
   \       0x1C   0xD30C             BCC.N    ??App_ProbeCallback_0
    706          		App_ProbeComRxPktSpd = ((CPU_FP32)(rxpkt_curr - App_ProbeComRxPktLast) / (ctr_curr - App_ProbeComCtrLast)) * OS_TICKS_PER_SEC;
    707          		App_ProbeComTxPktSpd = ((CPU_FP32)(txpkt_curr - App_ProbeComTxPktLast) / (ctr_curr - App_ProbeComCtrLast)) * OS_TICKS_PER_SEC;
    708          		App_ProbeComTxSymSpd = ((CPU_FP32)(sym_curr - App_ProbeComTxSymLast) / (ctr_curr - App_ProbeComCtrLast)) * OS_TICKS_PER_SEC;
    709          		App_ProbeComTxSymByteSpd = ((CPU_FP32)(symbyte_curr - App_ProbeComTxSymByteLast) / (ctr_curr - App_ProbeComCtrLast)) * OS_TICKS_PER_SEC;
    710          
    711          		App_ProbeComCtrLast = ctr_curr;
   \       0x1E   0x6120             STR      R0,[R4, #+16]
    712          		App_ProbeComRxPktLast = rxpkt_curr;
    713          		App_ProbeComTxPktLast = txpkt_curr;
   \       0x20   0x....             LDR.N    R2,??DataTable10_13
   \       0x22   0x....             LDR.N    R0,??DataTable10_14
   \       0x24   0x6801             LDR      R1,[R0, #+0]
    714          		App_ProbeComTxSymLast = sym_curr;
   \       0x26   0x....             LDR.N    R0,??DataTable10_15
   \       0x28   0x6021             STR      R1,[R4, #+0]
   \       0x2A   0x6813             LDR      R3,[R2, #+0]
    715          		App_ProbeComTxSymByteLast = symbyte_curr;
   \       0x2C   0x....             LDR.N    R2,??DataTable10_16
   \       0x2E   0x6063             STR      R3,[R4, #+4]
   \       0x30   0x6801             LDR      R1,[R0, #+0]
   \       0x32   0x60A1             STR      R1,[R4, #+8]
   \       0x34   0x6810             LDR      R0,[R2, #+0]
   \       0x36   0x60E0             STR      R0,[R4, #+12]
    716          	}
    717          #endif
    718          }
   \                     ??App_ProbeCallback_0: (+1)
   \       0x38   0xBD10             POP      {R4,PC}          ;; return
    719          #endif
    720          
    721          
    722          /*
    723           *********************************************************************************************************
    724           *                                      App_FormatDec()
    725           *
    726           * Description : Convert a decimal value to ASCII (without leading zeros).
    727           *
    728           * Argument(s) : pstr            Pointer to the destination ASCII string.
    729           *
    730           *               value           Value to convert (assumes an unsigned value).
    731           *
    732           *               digits          The desired number of digits.
    733           *
    734           * Return(s)   : none.
    735           *
    736           * Caller(s)   : various.
    737           *
    738           * Note(s)     : none.
    739           *********************************************************************************************************
    740           */
    741          
    742          
    743          /*
    744           *********************************************************************************************************
    745           *********************************************************************************************************
    746           *                                          uC/OS-II APP HOOKS
    747           *********************************************************************************************************
    748           *********************************************************************************************************
    749           */
    750          
    751          #if (OS_APP_HOOKS_EN > 0)
    752          /*
    753           *********************************************************************************************************
    754           *                                      TASK CREATION HOOK (APPLICATION)
    755           *
    756           * Description : This function is cal when a task is created.
    757           *
    758           * Argument(s) : ptcb   is a pointer to the task control block of the task being created.
    759           *
    760           * Note(s)     : (1) Interrupts are disabled during this call.
    761           *********************************************************************************************************
    762           */
    763          

   \                                 In section .text, align 2, keep-with-next
    764          void  App_TaskCreateHook(OS_TCB *ptcb)
    765          {
    766          #if ((APP_OS_PROBE_EN == DEF_ENABLED) && \
    767          	(OS_PROBE_HOOKS_EN == DEF_ENABLED))
    768          	OSProbe_TaskCreateHook(ptcb);
   \                     App_TaskCreateHook: (+1)
   \        0x0   0x....'....        B.W      OSProbe_TaskCreateHook
    769          #endif
    770          }
    771          
    772          /*
    773           *********************************************************************************************************
    774           *                                    TASK DELETION HOOK (APPLICATION)
    775           *
    776           * Description : This function is called when a task is deleted.
    777           *
    778           * Argument(s) : ptcb   is a pointer to the task control block of the task being deleted.
    779           *
    780           * Note(s)     : (1) Interrupts are disabled during this call.
    781           *********************************************************************************************************
    782           */
    783          

   \                                 In section .text, align 2, keep-with-next
    784          void  App_TaskDelHook(OS_TCB *ptcb)
    785          {
    786          	(void)ptcb;
    787          }
   \                     App_TaskDelHook: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    788          
    789          /*
    790           *********************************************************************************************************
    791           *                                      IDLE TASK HOOK (APPLICATION)
    792           *
    793           * Description : This function is called by OSTaskIdleHook(), which is called by the idle task.  This hook
    794           *               has been added to allow you to do such things as STOP the CPU to conserve power.
    795           *
    796           * Argument(s) : none.
    797           *
    798           * Note(s)     : (1) Interrupts are enabled during this call.
    799           *********************************************************************************************************
    800           */
    801          
    802          #if OS_VERSION >= 251

   \                                 In section .text, align 2, keep-with-next
    803          void  App_TaskIdleHook(void)
    804          {
    805          }
   \                     App_TaskIdleHook: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    806          #endif
    807          
    808          /*
    809           *********************************************************************************************************
    810           *                                        STATISTIC TASK HOOK (APPLICATION)
    811           *
    812           * Description : This function is called by OSTaskStatHook(), which is called every second by uC/OS-II's
    813           *               statistics task.  This allows your application to add functionality to the statistics task.
    814           *
    815           * Argument(s) : none.
    816           *********************************************************************************************************
    817           */
    818          

   \                                 In section .text, align 2, keep-with-next
    819          void  App_TaskStatHook(void)
    820          {
    821          }
   \                     App_TaskStatHook: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    822          
    823          /*
    824           *********************************************************************************************************
    825           *                                        TASK SWITCH HOOK (APPLICATION)
    826           *
    827           * Description : This function is called when a task switch is performed.  This allows you to perform other
    828           *               operations during a context switch.
    829           *
    830           * Argument(s) : none.
    831           *
    832           * Note(s)     : (1) Interrupts are disabled during this call.
    833           *
    834           *               (2) It is assumed that the global pointer 'OSTCBHighRdy' points to the TCB of the task that
    835           *                   will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
    836           *                  task being switched out (i.e. the preempted task).
    837           *********************************************************************************************************
    838           */
    839          
    840          #if OS_TASK_SW_HOOK_EN > 0

   \                                 In section .text, align 2, keep-with-next
    841          void  App_TaskSwHook(void)
    842          {
    843          #if ((APP_OS_PROBE_EN == DEF_ENABLED) && \
    844          	(OS_PROBE_HOOKS_EN == DEF_ENABLED))
    845          	OSProbe_TaskSwHook();
   \                     App_TaskSwHook: (+1)
   \        0x0   0x....'....        B.W      OSProbe_TaskSwHook
    846          #endif
    847          }
    848          #endif
    849          
    850          /*
    851           *********************************************************************************************************
    852           *                                     OS_TCBInit() HOOK (APPLICATION)
    853           *
    854           * Description : This function is called by OSTCBInitHook(), which is called by OS_TCBInit() after setting
    855           *               up most of the TCB.
    856           *
    857           * Argument(s) : ptcb    is a pointer to the TCB of the task being created.
    858           *
    859           * Note(s)     : (1) Interrupts may or may not be ENABLED during this call.
    860           *********************************************************************************************************
    861           */
    862          
    863          #if OS_VERSION >= 204

   \                                 In section .text, align 2, keep-with-next
    864          void  App_TCBInitHook(OS_TCB *ptcb)
    865          {
    866          	(void)ptcb;
    867          }
   \                     App_TCBInitHook: (+1)
   \        0x0   0x4770             BX       LR               ;; return
    868          #endif
    869          
    870          /*
    871           *********************************************************************************************************
    872           *                                        TICK HOOK (APPLICATION)
    873           *
    874           * Description : This function is called every tick.
    875           *
    876           * Argument(s) : none.
    877           *
    878           * Note(s)     : (1) Interrupts may or may not be ENABLED during this call.
    879           *********************************************************************************************************
    880           */
    881          
    882          #if OS_TIME_TICK_HOOK_EN > 0

   \                                 In section .text, align 2, keep-with-next
    883          void  App_TimeTickHook(void)
    884          {
    885          #if ((APP_OS_PROBE_EN == DEF_ENABLED) && \
    886          	(OS_PROBE_HOOKS_EN == DEF_ENABLED))
    887          	OSProbe_TickHook();
   \                     App_TimeTickHook: (+1)
   \        0x0   0x....'....        B.W      OSProbe_TickHook
    888          #endif
    889          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5: (+1)
   \        0x0   0xF8AD 0x5000      STRH     R5,[SP, #+0]
   \        0x4   0x4669             MOV      R1,SP
   \        0x6   0x4630             MOV      R0,R6
   \        0x8   0x....'....        B.W      GPIO_Init

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4: (+1)
   \        0x0   0xF8AD 0x2006      STRH     R2,[SP, #+6]
   \        0x4   0xF8AD 0x2002      STRH     R2,[SP, #+2]
   \        0x8   0xF8AD 0x5004      STRH     R5,[SP, #+4]
   \        0xC   0x4669             MOV      R1,SP
   \        0xE   0x4630             MOV      R0,R6
   \       0x10   0x....'....        B.W      TIM_TimeBaseInit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \        0x0   0x....'....        DC32     App_TaskStartStk

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \        0x0   0x....'....        DC32     Pulse

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \        0x0   0x4001'1000        DC32     0x40011000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \        0x0   0x4001'0800        DC32     0x40010800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \        0x0   0x4001'0C00        DC32     0x40010c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \        0x0   0x001A'0C00        DC32     0x1a0c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \        0x0   0x4002'0008        DC32     0x40020008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \        0x0   0x4001'244C        DC32     0x4001244c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \        0x0   0x4001'2400        DC32     0x40012400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \        0x0   0x4000'0400        DC32     0x40000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \        0x0   0x4000'0800        DC32     0x40000800

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \        0x0   0x....'....        DC32     App_ProbeComRxPktLast

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \        0x0   0x....'....        DC32     OSTime

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \        0x0   0x....'....        DC32     ProbeCom_TxPktCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \        0x0   0x....'....        DC32     ProbeCom_RxPktCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \        0x0   0x....'....        DC32     ProbeCom_TxSymCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_16:
   \        0x0   0x....'....        DC32     ProbeCom_TxSymByteCtr

   \                                 In section .text, align 4, keep-with-next
   \                     ?_0:
   \        0x0   0x53 0x74          DC8 "Start Task"
   \              0x61 0x72    
   \              0x74 0x20    
   \              0x54 0x61    
   \              0x73 0x6B    
   \              0x00         
   \        0xB   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_1:
   \        0x0   0x4C 0x69          DC8 "LightMbox"
   \              0x67 0x68    
   \              0x74 0x4D    
   \              0x62 0x6F    
   \              0x78 0x00    
   \        0xA   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ?_2:
   \        0x0   0x54 0x65          DC8 "TempMbox"
   \              0x6D 0x70    
   \              0x4D 0x62    
   \              0x6F 0x78    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ?_3:
   \        0x0   0x53 0x6F          DC8 "SoilMbox"
   \              0x69 0x6C    
   \              0x4D 0x62    
   \              0x6F 0x78    
   \              0x00         
   \        0x9   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    890          #endif
    891          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   ADC_Task
         8   -> OSMboxPost
         8   -> OSTimeDlyHMSM
       8   App_ProbeCallback
         8   -> BSP_PB_GetStatus
       0   App_TCBInitHook
       0   App_TaskCreateHook
         0   -> OSProbe_TaskCreateHook
       0   App_TaskDelHook
       0   App_TaskIdleHook
      64   App_TaskStart
        64   -> ADC_Cmd
        64   -> ADC_DMACmd
        64   -> ADC_GetCalibrationStatus
        64   -> ADC_GetResetCalibrationStatus
        64   -> ADC_Init
        64   -> ADC_RegularChannelConfig
        64   -> ADC_ResetCalibration
        64   -> ADC_SoftwareStartConvCmd
        64   -> ADC_StartCalibration
        64   -> BSP_Init
        64   -> DMA_Cmd
        64   -> DMA_DeInit
        64   -> DMA_Init
        64   -> GPIO_Init
        64   -> GPIO_PinRemapConfig
        64   -> OSEventNameSet
        64   -> OSMboxCreate
        64   -> OSProbe_Init
        64   -> OSProbe_SetCallback
        64   -> OSProbe_SetDelay
        64   -> OSStatInit
        64   -> OSTaskCreateExt
        64   -> OSTimeDlyHMSM
        64   -> OS_CPU_SysTickInit
        64   -> ProbeCom_Init
        64   -> RCC_AHBPeriphClockCmd
        64   -> RCC_APB1PeriphClockCmd
        64   -> RCC_APB2PeriphClockCmd
        64   -> TIM_ARRPreloadConfig
        64   -> TIM_Cmd
        64   -> TIM_OC3PreloadConfig
        64   -> TIM_OC4PreloadConfig
        64   -> TIM_TimeBaseInit
       0   App_TaskStatHook
       0   App_TaskSwHook
         0   -> OSProbe_TaskSwHook
       0   App_TimeTickHook
         0   -> OSProbe_TickHook
      32   Cooling_Task
        32   -> OSMboxPend
        32   -> OSTimeDlyHMSM
        32   -> TIM_OC3Init
        32   -> delay
      16   LED_Task
        16   -> GPIO_ResetBits
        16   -> GPIO_SetBits
        16   -> OSMboxPend
        16   -> OSTimeDlyHMSM
      32   Water_Task
        32   -> OSMboxPend
        32   -> OSTimeDlyHMSM
        32   -> TIM_OC4Init
        32   -> delay
       0   delay
      32   main
        32   -> BSP_IntDisAll
        32   -> OSInit
        32   -> OSStart
        32   -> OSTaskCreateExt
        32   -> OSTaskNameSet


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_14
       4  ??DataTable10_15
       4  ??DataTable10_16
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
      12  ?Subroutine0
      12  ?Subroutine1
       8  ?Subroutine2
       8  ?Subroutine3
      20  ?Subroutine4
      12  ?Subroutine5
      12  ?_0
      12  ?_1
      12  ?_2
      12  ?_3
      58  ADC_Task
       1  App_ProbeB1
      58  App_ProbeCallback
      24  App_ProbeComRxPktLast
          App_ProbeComTxPktLast
          App_ProbeComTxSymLast
          App_ProbeComTxSymByteLast
          App_ProbeComCtrLast
          App_ProbeCounts
       4  App_ProbeComRxPktSpd
       4  App_ProbeComTxPktSpd
       4  App_ProbeComTxSymByteSpd
       4  App_ProbeComTxSymSpd
       2  App_TCBInitHook
       4  App_TaskCreateHook
       2  App_TaskDelHook
       2  App_TaskIdleHook
     636  App_TaskStart
     512  App_TaskStartStk
       2  App_TaskStatHook
       4  App_TaskSwHook
       4  App_TimeTickHook
      86  Cooling_Task
      38  LED_Task
    2088  Pulse
          ADC_ValueTab
          ADC_Value
          LightMbox
          TempMbox
          SoilMbox
          ADC_TaskStartStk
          LED_TaskStartStk
          Cooling_TaskStartStk
          Water_TaskStartStk
      94  Water_Task
       2  delay
      76  main

 
   553 bytes in section .bss
 2'088 bytes in section .data
 1'256 bytes in section .text
 
 1'256 bytes of CODE memory
 2'641 bytes of DATA memory

Errors: none
Warnings: 9
